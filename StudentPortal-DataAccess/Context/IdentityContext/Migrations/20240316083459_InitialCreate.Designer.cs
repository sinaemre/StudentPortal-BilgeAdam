// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentPortal_DataAccess.Context.IdentityContext;

#nullable disable

namespace StudentPortal_DataAccess.Context.IdentityContext.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20240316083459_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b609c887-e794-4762-be5a-6c95232812a4",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "74f37192-b74b-4330-b875-372e82c04002",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "e256341e-70f6-4573-b09a-ab4205a7efc6",
                            Name = "teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "dd8eadf8-f90f-41f3-9d81-096ef9e7829b",
                            Name = "hrPersonal",
                            NormalizedName = "HRPERSONAL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "92881b6d-cb5d-4809-b964-91074a5184d1",
                            RoleId = "b609c887-e794-4762-be5a-6c95232812a4"
                        },
                        new
                        {
                            UserId = "9d14c127-c5ec-4372-8ba9-26d58ebcdbe1",
                            RoleId = "74f37192-b74b-4330-b875-372e82c04002"
                        },
                        new
                        {
                            UserId = "2735fcfe-c490-4055-ae67-18ae6eca2212",
                            RoleId = "74f37192-b74b-4330-b875-372e82c04002"
                        },
                        new
                        {
                            UserId = "427f1691-2f27-44bb-b9f1-d1a4782381af",
                            RoleId = "e256341e-70f6-4573-b09a-ab4205a7efc6"
                        },
                        new
                        {
                            UserId = "8b3cd4dd-84f7-4c44-8279-7124a458dfbf",
                            RoleId = "dd8eadf8-f90f-41f3-9d81-096ef9e7829b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LoginCount")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "92881b6d-cb5d-4809-b964-91074a5184d1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4932e8fc-7ef7-4287-ac35-a92fbdd7db94",
                            CreatedDate = new DateTime(2024, 3, 16, 11, 34, 58, 615, DateTimeKind.Local).AddTicks(8530),
                            Email = "admin@test.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            LoginCount = 0,
                            NormalizedEmail = "ADMIN@TEST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEzh42p+hljhFrdsxTfZQSJy8/eZ+Y3Dc0rF4SeWOJFZM/C7arL8/ztt0ht887ySdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "910ff034-0620-403f-a4f5-d5d966bb9020",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "9d14c127-c5ec-4372-8ba9-26d58ebcdbe1",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1996, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a255e396-5be8-4e16-a21b-a10acbba709a",
                            CreatedDate = new DateTime(2024, 3, 16, 11, 34, 58, 701, DateTimeKind.Local).AddTicks(2193),
                            Email = "student@test.com",
                            EmailConfirmed = false,
                            FirstName = "Öğrenci - 1",
                            LastName = "Öğrenci - 1",
                            LockoutEnabled = false,
                            LoginCount = 0,
                            NormalizedEmail = "STUDENT@TEST.COM",
                            NormalizedUserName = "STUDENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEMtAsKhKzlnbd6wZB7qg2h9Z42htUsmGbjviatQnsqA9pLspZqZdOvciB9Ai40ChQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c51e805f-ca4a-40f1-add3-39e50b307615",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "student"
                        },
                        new
                        {
                            Id = "2735fcfe-c490-4055-ae67-18ae6eca2212",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1996, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3f4fb6ff-c383-464d-8630-e4f546d28f17",
                            CreatedDate = new DateTime(2024, 3, 16, 11, 34, 58, 786, DateTimeKind.Local).AddTicks(8699),
                            Email = "student2@test.com",
                            EmailConfirmed = false,
                            FirstName = "Öğrenci - 2",
                            LastName = "Öğrenci - 2",
                            LockoutEnabled = false,
                            LoginCount = 0,
                            NormalizedEmail = "STUDENT2@TEST.COM",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAEFJY8DfdUE5x24ye4iaNdmW17Yijmm5Ofv1hYvaAmpmhgHnFPTs4DiRXOjswfRyMTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94a72359-5ca7-40c3-ac89-68c8d4d69866",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = "427f1691-2f27-44bb-b9f1-d1a4782381af",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1996, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "bbecf63d-2c7a-4cc5-ae9e-de5e8929ca79",
                            CreatedDate = new DateTime(2024, 3, 16, 11, 34, 58, 872, DateTimeKind.Local).AddTicks(1163),
                            Email = "teacher@test.com",
                            EmailConfirmed = false,
                            FirstName = "Öğretmen - 1",
                            LastName = "Öğretmen - 1",
                            LockoutEnabled = false,
                            LoginCount = 0,
                            NormalizedEmail = "TEACHER@TEST.COM",
                            NormalizedUserName = "TEACHER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPWfDy9pFNEDlINpAA4xb5bf9oTxFI8zqpxFoK5lJVn+13cBYaNj/HZgX4PKkx0QEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b2b2a04-f547-4707-b3d0-c04f55c0da93",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = "8b3cd4dd-84f7-4c44-8279-7124a458dfbf",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1996, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "bc6344e7-1513-4823-958e-d1bdaddb0738",
                            CreatedDate = new DateTime(2024, 3, 16, 11, 34, 58, 957, DateTimeKind.Local).AddTicks(5845),
                            Email = "hrpersonal@test.com",
                            EmailConfirmed = false,
                            FirstName = "İnsan Kaynakları",
                            LastName = "İnsan Kaynakları",
                            LockoutEnabled = false,
                            LoginCount = 0,
                            NormalizedEmail = "HRPERSONAL@TEST.COM",
                            NormalizedUserName = "HRPERSONAL",
                            PasswordHash = "AQAAAAIAAYagAAAAEGP/2cWMwjJW5n7UWSIwVsJaaHTB1v4M/PFwlQ5KLKkafAUwry4fXBENhIuwq+K70Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54ac2e10-b78a-4a1f-82cc-98122d610378",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "hrPersonal"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
